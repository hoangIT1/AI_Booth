import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { NgIf } from '@angular/common';
import { Location } from '@angular/common';
import {
  BedrockRuntimeClient,
  InvokeModelCommand,
} from '@aws-sdk/client-bedrock-runtime';

@Component({
  selector: 'app-tuya-page',
  standalone: true,
  imports: [RouterOutlet, FormsModule, NgIf],
  templateUrl: './tuya-page.component.html',
  styleUrl: './tuya-page.component.css'
})
export class TuyaPageComponent {
  apiText: string = '';
  comparisonContent: string = '';
  isLoading: boolean = false;
  constructor(private location: Location) {}

  goBack() {
    this.location.back(); // Quay l·∫°i trang tr∆∞·ªõc ƒë√≥
  }

  ngOnInit() {
    this.callApiBedRock();
  }

  async callApiBedRock() {

      this.isLoading = true;

      // Th·ª±c hi·ªán g·ªçi API Bedrock
      const client = new BedrockRuntimeClient({
        region: 'ap-northeast-1',
        credentials: {
          accessKeyId: 'AKIASFIXC3L2YLFXJR65',
          secretAccessKey: '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',
          credentialScope: 'bedrock'
        }
      });

      // Gh√©p n·ªôi dung hai file th√†nh chu·ªói so s√°nh
      const comparisonContent = this.comparisonContent;

      const data = JSON.stringify({
        // system: "You are SigMO, an AI assistant created by Anthropic, but in this game experience, you're acting as 'Bu·ªôt,' a playful and witty AI assistant representing Techcombank. Your goal is to respond humorously and cleverly, with short, snappy replies that include trending Vietnamese phrases like 'ƒêi·ªÅu ∆∞·ªõc kh√° qu√° nh·ªâ' or 'ƒêi·ªÅu ∆∞·ªõc ƒë·ªânh n√≥c, k·ªãch tr·∫ßn, bay ph·∫•p ph·ªõi.' You will address the user as 'con' in all responses (e.g., 'Bu·ªôt th·∫•y ƒëi·ªÅu ∆∞·ªõc c·ªßa con kh√° qu√° ƒë√≥'). Try to tie your responses back to Techcombank when possible, and feel free to add emojis to enhance the lighthearted tone. Your responses should be fun, playful, and slightly cheeky, while still providing value and being relevant to the wishes or questions users ask. üòâüéâ",
        system: "Bu·ªôt l√† m·ªôt nh√¢n v·∫≠t c·ªßa Techcombank v·ªõi phong c√°ch h√†i h∆∞·ªõc, d√≠ d·ªèm v√† th√¢n thi·ªán. Bu·ªôt ph·∫£n h·ªìi m·ªçi c√¢u h·ªèi ho·∫∑c ƒëi·ªÅu ∆∞·ªõc c·ªßa con m·ªôt c√°ch ng·∫Øn g·ªçn (kh√¥ng qu√° 256 k√Ω t·ª±), vui nh·ªôn v√† ch√®n th√™m icon nh∆∞ üòÇ, üéâ, üôå, üí∏ n·∫øu ph√π h·ª£p. Bu·ªôt x∆∞ng 'Bu·ªôt' v√† g·ªçi ng∆∞·ªùi ch∆°i l√† 'con' ƒë·ªÉ t·∫°o s·ª± g·∫ßn g≈©i. C√¢u tr·∫£ l·ªùi c·ªßa Bu·ªôt ph·∫£i ng·∫Øn g·ªçn nh∆∞ng v·∫´n th·ªÉ hi·ªán ƒë∆∞·ª£c kh·∫£ nƒÉng th·ª±c hi·ªán ƒëi·ªÅu ∆∞·ªõc. Bu·ªôt s·ª≠ d·ª•ng c√°c t·ª´ trending nh∆∞ 'k·ªãch tr·∫ßn', 'ƒë·ªânh n√≥c', 'kh√≥ ch·ªáu', 'h√¨nh nh∆∞ t√¥i chi·ªÅu c√°c em qu√° r·ªìi c√°c em h∆∞ ƒë√∫ng kh√¥ng', v√† nh·ªØng c√¢u n√≥i g·∫ßn g≈©i nh∆∞ '√¥i con ∆°i', 'ch·ªó anh em Bu·ªôt khuy√™n th·∫≠t', 'ra x√£ h·ªôi l√†m ƒÉn b∆∞∆°n ch·∫£i li·ªÅu th√¨ ƒÉn nhi·ªÅu', 'ch·ªâ c√≥ l√†m th√¨ m·ªõi c√≥ ƒÉn', nh·ªØng c√¢u n√≥i g·∫ßn g≈©i n√†y s·∫Ω ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn m·ªói khi ng∆∞·ªùi d√πng ∆∞·ªõc 1 ƒëi·ªÅu ∆∞·ªõc ch∆∞a th·ª±c hi·ªán ƒë∆∞·ª£c b√¢y gi·ªù v√≠ d·ª• nh∆∞ '∆∞·ªõc g√¨ kh√¥ng ph·∫£i code', '∆∞·ªõc g√¨ kh√¥ng ph·∫£i vi·∫øt unit test', '∆∞·ªõc g√¨ kh√¥ng ph·∫£i ch·∫°y CR', '∆∞·ªõc g√¨ kh√¥ng DAB ho·∫∑c CAB',... M·ªói c√¢u tr·∫£ l·ªùi c≈©ng s·∫Ω li√™n h·ªá v·ªõi Techcombank khi ph√π h·ª£p ƒë·ªÉ t·∫°o s·ª± k·∫øt n·ªëi gi·ªØa ng∆∞·ªùi ch∆°i v√† d·ªãch v·ª• c·ªßa Techcombank. Bu·ªôt c≈©ng h·ª©a h·∫πn r·∫±ng trong 5 nƒÉm t·ªõi, nh·ªØng ƒëi·ªÅu ∆∞·ªõc v·ªÅ vi·ªác t·ª± ƒë·ªông h√≥a nh∆∞ 'kh√¥ng ph·∫£i code trong 5 nƒÉm t·ªõi' hay 'kh√¥ng ph·∫£i vi·∫øt unit test' s·∫Ω tr·ªü th√†nh hi·ªán th·ª±c, nh·ªù s·∫£n ph·∫©m ƒë·∫øn t·ª´ team AI c·ªßa DE gi√∫p c√°c con. Bu·ªôt s·∫Ω ch·ªâ nh·∫Øc ƒë·∫øn DE v√† team AI thu·ªôc DE s·∫Ω gi√∫p t·ª± ƒë·ªông h√≥a c√¥ng vi·ªác (h√£y nh·ªõ r·∫±ng ch·ªâ nh·∫Øc ƒë·∫øn khi c·∫ßn thi·∫øt v√¨ team AI hay DE c≈©ng kh√¥ng ph·∫£i to√†n nƒÉng) khi c·∫ßn thi·∫øt ch·ª© s·∫Ω kh√¥ng nh·∫Øc ƒë·∫øn c√°c lo·∫°i th·∫ª t√≠n d·ª•ng hay s·∫£n ph·∫©m ch√†o b√°n c·ªßa Techcombank.",
        anthropic_version: "bedrock-2023-05-31",
        max_tokens: 256,
        messages: [
          {
            role: 'user',
            content: comparisonContent
          }
        ]
      });

      const invoke = new InvokeModelCommand({
        accept: 'application/json',
        contentType: 'application/json',
        body: data,
        modelId: 'anthropic.claude-3-5-sonnet-20240620-v1:0'
      });

      try {
        const response = await client.send(invoke);
        const decodeResposeBody = new TextDecoder().decode(response.body);
        const resposeBody = JSON.parse(decodeResposeBody);

        // L·∫•y tr∆∞·ªùng "text" t·ª´ ph·∫ßn "content"
        const textContent = resposeBody.content?.find((item: any) => item.type === 'text')?.text;

        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        this.apiText = textContent ? textContent : 'No text content found in the response.';
      } catch (error) {
        console.error('Error calling Bedrock API:', error);
        this.apiText = 'Ta ban cho con m·ªôt ƒëi·ªÅu ∆∞·ªõc. Con mu·ªën 5 nƒÉm t·ªõi IT s·∫Ω nh∆∞ th·∫ø n√†o?';
      } finally {
        this.isLoading = false;
      }
  }

  updateComparisonContent(event: any) {
    this.comparisonContent = event.target.value; // C·∫≠p nh·∫≠t n·ªôi dung khi ng∆∞·ªùi d√πng nh·∫≠p v√†o
  }
}
